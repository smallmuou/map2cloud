#!/bin/bash
#
# Copyright (C) 2014 Wenva <lvyexuwenfa100@126.com>
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is furnished
# to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

spushd() {
     pushd "$1" 2>&1> /dev/null
}

spopd() {
     popd 2>&1> /dev/null
}

info() {
     local green="\033[1;32m"
     local normal="\033[0m"
     echo -e "[${green}INFO${normal}] $1"
}

cmdcheck() {
    command -v $1>/dev/null 2>&1 || { error >&2 "Please install command $1 first."; exit 1; }   
}

error() {
     local red="\033[1;31m"
     local normal="\033[0m"
     echo -e "[${red}ERROR${normal}] $1"
}

curdir() {
    if [ ${0:0:1} = '/' ] || [ ${0:0:1} = '~' ]; then
        echo "$(dirname $0)"
    elif [ -L $0 ];then
        name=`readlink $0`
        echo $(dirname $name)
    else
        echo "`pwd`/$(dirname $0)"
    fi
}

curos() {
    echo `uname|tr "[:upper:]" "[:lower:]"`
}

#########################################
###           GROBLE DEFINE           ###
#########################################

VERSION=1.0.0
AUTHOR=smallmuou

#########################################
###             ARG PARSER            ###
#########################################

usage() {
prog=`basename $0`

cat << EOF
$prog version $VERSION by $AUTHOR

USAGE: $prog [OPTIONS] ssh-user@cloud-ip [local-ip:]local-port cloud-port 

DESCRIPTION:
    $prog is a script that can map local port to cloud.

    ssh-user        The ssh user to access to cloud server.
    cloud-ip        The cloud server ip or domain.
    local-ip        The local ip to map, default is localhost.
    local-port      The local port to map.
    cloud-port      The port which local port to map to. note it must be an even number.

OPTIONS:
    -h              Show this help message and exit.
    -i              Assign ssh private key path.
    -p              Assign ssh port.
    -n              Assign name of the service.
    -r              Unmap the local port.

EXAMPLES:
    map2cloud root@120.24.18.12 22 22222
    map2cloud root@120.24.18.12 192.168.1.100:80 10080
    map2cloud -r r-80

EOF
exit 1
}

ssh_key_path=$HOME/.ssh/id_rsa
ssh_port=22
ssh_server=''
local_ip='localhost'
local_port=''
cloud_port=''
service_name=''
os=`curos`
start_seq=99

[ "$os" != 'linux' ] && { error "only support linux os now."; exit -1; }

# 是否支持systemd启动
systemd_support=0
if [ -d "/usr/lib/systemd/system" ];then
    systemd_support=1
fi

teardown_initd_service() {
    local file=/etc/init.d/$service_name
    [ ! -f $file ] && { error "Can not found service $service_name, please check it."; exit -1; }

    /etc/init.d/$service_name stop

    rm -rf $file
    rm -rf /etc/rc3.d/S$start_seq$service_name
    rm -rf /etc/rc4.d/S$start_seq$service_name
    rm -rf /etc/rc5.d/S$start_seq$service_name

    info "Teardown service $service_name successfully"
}

teardown_systemd_service() {
    local file=/usr/lib/systemd/system/$service_name.service
    [ ! -f $file ] && { error "Can not found service $service_name, please check it."; exit -1; }

    systemctl stop $service_name
    systemctl disable $service_name
    rm -rf $file
    systemctl daemon-reload

    info "Teardown service $service_name successfully"
}

teardown_service() {
    if [ $systemd_support -eq 1 ];then
        teardown_systemd_service
    else
        teardown_initd_service
    fi
}

while getopts 'hi:n:p:r:' arg; do
    case $arg in
        h)
            usage
            ;;
        i)
            ssh_key_path=$OPTARG
            ;;
        n)
            service_name=$OPTARG
            ;;
        p)
            ssh_port=$OPTARG
            ;;
        r)
            service_name=$OPTARG
            teardown_service
            exit 0;
            ;;
        ?)
            usage
            ;;
    esac
done

shift $(($OPTIND - 1))

[ $# -ne 3 ] && usage

ssh_server=$1

local_parse() {
    if [ $# -eq 2 ];then
        local_ip=$1
        local_port=$2
    else 
        local_port=$1
    fi
}

local_parse ${2/:/ }
[ -z "$service_name" ] && service_name=r$local_port
cloud_port=$3

[ "`expr $cloud_port % 2`" != "0" ] && { error "cloud port must be an even number."; exit -1; }

if [ $systemd_support -eq 1 ];then
    initfile=/usr/lib/systemd/system/${service_name}.service
else
    initfile=/etc/init.d/$service_name
fi

#########################################
###            MAIN ENTRY             ###
#########################################

setup_initd_service() {

cat << EOF > $initfile
#!/bin/bash
#
# $service_name           
#
# chkconfig: - $start_seq 60
# description: map local port $local_port to cloud port $cloud_port

PATH=/sbin:/usr/sbin:/bin:/usr/bin:/usr/local/bin
export PATH

initdir=/etc/init.d
prog=$service_name
server=$ssh_server
rport=$cloud_port
ip=$local_ip
port=$local_port
mport=`expr $cloud_port + 1`
sshkey=$ssh_key_path
sshport=$ssh_port

start() {
    echo -n $"Starting \$prog: "
    nohup `which autossh` -M \$mport -N -R \$rport:\$ip:\$port \$server -p \$sshport -i \$sshkey >/dev/null 2>&1 &
    echo "successed"
}

stop() {
    echo -n $"Stopping \$prog: "
    ps aux|grep \$rport|awk '{print \$2}'|xargs kill -9 >/dev/null 2>&1
    echo "successed"
}

status() {
    echo -n $"\$prog is "
    count=\`ps aux|grep \$rport|wc -l\`
    if [ \$count -gt 1 ];then
        echo "running ..."
    else
        echo "stoped"
    fi
}

restart() {
    stop
    start
}

case "\$1" in
    status)
        status
        ;;
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        restart
        ;;
    *)
        echo $"Usage: \$0 {start|stop|status|restart}"
        exit 2
        ;;
esac

exit \$?

EOF

chmod +x $initfile

ln -s /etc/init.d/$service_name /etc/rc3.d/S$start_seq$service_name
ln -s /etc/init.d/$service_name /etc/rc4.d/S$start_seq$service_name
ln -s /etc/init.d/$service_name /etc/rc5.d/S$start_seq$service_name

}

setup_systemd_service() {
local server=$ssh_server
local rport=$cloud_port
local ip=$local_ip
local port=$local_port
local mport=`expr $cloud_port + 1`
local sshkey=$ssh_key_path
local sshport=$ssh_port

cat << EOF > $initfile
[Unit]
Description=map local port $local_port to cloud port $cloud_port
After=network.service remote_fs.service wireless.service

[Service]
Type=simple
ExecStart=`which nohup` `which autossh` -M $mport -N -R $rport:$ip:$port $server -p $sshport -i $sshkey >/dev/null 2>&1 &
ExecReload=/bin/kill -HUP $MAINPID
KillMode=process
Restart=on-failure
RestartSec=42s

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload
systemctl enable $service_name
}

setup_service() {
    if [ $systemd_support -eq 1 ];then
        setup_systemd_service
        info "Successfully. You can use command [systemctl start/stop/restart/status $service_name] to control it."
    else
        setup_initd_service
        info "Successfully. You can use command [/etc/init.d/$service_name start/stop/restart/status] to control it."
    fi
}

cmdcheck autossh
cmdcheck wc
cmdcheck ssh
cmdcheck ssh-keygen
cmdcheck ssh-copy-id

[ -f $initfile ] && { error "The service $service_name already exist. you can use other name by -n or remove it by -r"; exit -1; }


if [ ! -f $ssh_key_path ];then
    error "Not found ssh private key($ssh_key_path), please assign it or use ssh-keygen to generate it."
    exit -1
fi

ssh -p $ssh_port -i $ssh_key_path $ssh_server echo -n
if [ $? -ne 0 ];then
    info "Trying use ssh-copy-id to copy your ssh public key to server ..."
    ssh-copy-id -p $ssh_port -i $ssh_key_path $ssh_server 2> /dev/null
    if [ $? -ne 0 ];then
        error "Please copy ssh public key($ssh_key_path.pub) and append to your server authorize file(/root/.ssh/authorized_keys) manually."
        exit -1
    fi
    ssh -p $ssh_port -i $ssh_key_path $ssh_server echo -n
fi

info "Setup service $service_name ..."
setup_service
